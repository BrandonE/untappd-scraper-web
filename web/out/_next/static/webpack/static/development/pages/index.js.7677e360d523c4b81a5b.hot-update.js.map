{"version":3,"file":"static/webpack/static/development/pages/index.js.7677e360d523c4b81a5b.hot-update.js","sources":["webpack:///./lib/utils.js"],"sourcesContent":["import * as axios from 'axios'\nimport * as cheerio from 'cheerio'\nimport * as moment from 'moment-timezone'\nimport { Loader } from '@googlemaps/loader'\n\nexport const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\nconst baseUrl = 'https://cors-anywhere.herokuapp.com/https://untappd.com'\n\nconst timeToMomentWithTimezone = (time) => {\n  const offset = moment(time).format('Z')\n  const timezoneNames = moment.tz.names()\n\n  const timezoneName = timezoneNames.find(timezoneName =>\n    offset === moment.tz(timezoneName).format('Z')\n  )\n\n  return moment.tz(time, timezoneName)\n}\n\nconst getUserDom = async username => {\n  const res = await axios.get(`${baseUrl}/user/${username}`)\n\n  if (res.status !== 200) {\n    throw new Error('Could not fetch user data.')\n  }\n\n  return cheerio.load(res.data)\n}\n\nconst getFriendsDom = async username => {\n  const res = await axios.get(`${baseUrl}/user/${username}/friends`)\n\n  if (res.status !== 200) {\n    throw new Error('Could not fetch friends data.')\n  }\n\n  return cheerio.load(res.data)\n}\n\nconst getBeersDom = async username => {\n  const res = await axios.get(`${baseUrl}/user/${username}/beers`)\n\n  if (res.status !== 200) {\n    throw new Error('Could not fetch beers data.')\n  }\n\n  return cheerio.load(res.data)\n}\n\nconst getVenuesDom = async username => {\n  const res = await axios.get(`${baseUrl}/user/${username}/venues?type=&sort=highest_checkin`)\n\n  if (res.status !== 200) {\n    throw new Error('Could not fetch venue data.')\n  }\n\n  return cheerio.load(res.data)\n}\n\nconst parseNumber = num =>\n  (num) ? parseInt(num.replace(/,/g, ''), 10) : NaN\n\nconst parseStats = $ => {\n  const stats = {}\n  const statElements = $('.stat')\n\n  if (!statElements || statElements.length !== 4) {\n    throw new Error('Could not parse stats data.')\n  }\n\n  const statsArray = []\n\n  statElements.each((i, statElement) => {\n    statsArray.push(parseNumber($(statElement).text()))\n  })\n\n  stats.totalBeers = statsArray[0]\n  stats.totalUnique = statsArray[1]\n  stats.totalBadges = statsArray[2]\n  stats.totalFriends = statsArray[3]\n\n  return stats\n}\n\nexport const parseRecentActivity = $ => {\n  const recentActivity = []\n  const checkInElements = $('.checkin')\n\n  try {\n    checkInElements.each((i, checkInElement) => {\n      const activity = {}\n      const checkInTopText = $(checkInElement).find('.top .text')\n      const checkInBottomLinks = $(checkInElement).find('.bottom a')\n\n      if (!checkInTopText || !checkInBottomLinks || checkInBottomLinks.length === 0) {\n        throw new Error('Could not parse check-in data.')\n      }\n\n      const checkInText = checkInTopText.text()\n      const checkInTime = $(checkInBottomLinks[0]).text()\n\n      if (!checkInTime) {\n        throw new Error('Could not parse check-in time.')\n      }\n\n      activity.time = timeToMomentWithTimezone(checkInTime)\n\n      let parts = checkInText.split(' is drinking an ')\n\n      if (parts.length === 1) {\n        parts = checkInText.split(' is drinking a ')\n      }\n\n      if (parts.length === 1) {\n        parts = checkInText.split(' is drinking ')\n      }\n\n      if (parts.length === 1) {\n        throw new Error('Could not parse check-in drink.')\n      }\n\n      parts = parts[1].split(' by ')\n      activity.beer = parts[0]\n\n      if (parts.length === 2) {\n        parts = parts[1].split(' at ')\n\n        activity.brewery = parts[0]\n\n        if (parts.length === 2) {\n          activity.location = parts[1]\n        }\n      }\n\n      recentActivity.push(activity)\n    })\n  } catch (err) {\n    throw new Error(err)\n  }\n\n  return recentActivity\n}\n\nconst parseFriends = $ => {\n  const friends = []\n  const userElements = $('.user .info')\n\n  userElements.each((i, userElement) => {\n    const nameElement = $(userElement).find('h1', 'a')\n    const usernameElement = $(userElement).find('.username')\n    const locationElement = $(userElement).find('.location')\n\n    if (!nameElement || !usernameElement || !locationElement) {\n      throw new Error('Could not parse friend details data.')\n    }\n\n    friends.push({\n      name: $(nameElement).text(),\n      username: $(usernameElement).text(),\n      location: $(locationElement).text()\n    })\n  })\n\n  return friends\n}\n\nconst parseBeers = $ => {\n  const beers = []\n\n  const beerElements = $('.beer-item')\n\n  beerElements.each((i, beerElement) => {\n    const nameElement = $(beerElement).find('.name a')\n    const breweryElement = $(beerElement).find('.brewery')\n    const styleElement = $(beerElement).find('.style')\n    const abvElement = $(beerElement).find('.abv')\n    const ibuElement = $(beerElement).find('.ibu')\n    const checkInsElement = $(beerElement).find('.check-ins')\n\n    if (!nameElement || !breweryElement || !styleElement || !abvElement || !ibuElement) {\n      throw new Error('Could not parse beer details data.')\n    }\n\n    const dateElements = $(beerElement).find('.date a .date-time')\n\n    if (dateElements.length !== 2) {\n      throw new Error('Could not parse beer dates.')\n    }\n\n    beers.push({\n      name: $(nameElement).text(),\n      brewery: $(breweryElement).text(),\n      style: $(styleElement).text(),\n      abv: $(abvElement).text(),\n      ibu: $(ibuElement).text(),\n      firstDrinkTime: timeToMomentWithTimezone($(dateElements[0]).text()),\n      lastDrinkTime: timeToMomentWithTimezone($(dateElements[1]).text()),\n      checkIns: parseNumber($(checkInsElement).text().split('Total: ')[1])\n    })\n  })\n\n  return beers\n}\n\nconst parseVenues = $ => {\n  const venues = []\n  const venueElements = $('.venue-item')\n\n  venueElements.each((i, venueElement) => {\n    const venueDetailsElement = $(venueElement).find('.venue-details')\n\n    if (!venueDetailsElement) {\n      throw new Error('Could not parse venue data.')\n    }\n\n    const nameElement = $(venueDetailsElement).find('.name a')\n    const addressElement = $(venueDetailsElement).find('.address')\n    const checkInsElement = $(venueElement).find('.details .check-ins')\n    const dateElements = $(venueElement).find('.date')\n\n    if (!nameElement || !addressElement || !checkInsElement || !dateElements || dateElements.length === 0) {\n      throw new Error('Could not parse venue details data.')\n    }\n\n    const address = addressElement.text().trim()\n    const firstDateText = $(dateElements[0]).text()\n    let firstVisitDate\n    let lastVisitDate\n\n    if (dateElements.length === 2) {\n      firstVisitDate = firstDateText\n      lastVisitDate = $(dateElements[1]).text().split('Last Visit: ')[1]\n    } else {\n      lastVisitDate = firstDateText\n    }\n\n    venues.push({\n      name: nameElement.text().trim(),\n      address,\n      checkIns: parseNumber(checkInsElement.text().split('Check-ins: ')[1]),\n      firstVisitDate,\n      lastVisitDate\n    })\n  })\n\n  return venues\n}\n\nconst updateDrinkHistogram = (beerAnalytics, drinkTime) => {\n  const dayOfWeek = drinkTime.format('ddd')\n  beerAnalytics.dayOfWeek[dayOfWeek]++\n\n  const hourOfDay = parseNumber(drinkTime.format('H'))\n  beerAnalytics.hourOfDay[hourOfDay]++\n\n  const dayOfMonth = parseNumber(drinkTime.format('D'))\n  beerAnalytics.dayOfMonth[dayOfMonth]++\n}\n\nconst analyzeBeers = (beers, recentActivity) => {\n  const beerAnalytics = {\n    dayOfWeek: {},\n    hourOfDay: {},\n    dayOfMonth: {},\n    binges: [],\n    heavyUses: []\n  }\n\n  const uniqueDrinkTimes = []\n  const uniqueDrinkUnixTimestamps = []\n\n  for (const day of daysOfWeek) {\n    beerAnalytics.dayOfWeek[day] = 0\n  }\n\n  for (let i = 0; i < 24; i++) {\n    beerAnalytics.hourOfDay[i] = 0\n  }\n\n  for (let i = 1; i <= 31; i++) {\n    beerAnalytics.dayOfMonth[i] = 0\n  }\n\n  for (const beer of beers) {\n    uniqueDrinkTimes.push(beer.firstDrinkTime)\n    uniqueDrinkUnixTimestamps.push(beer.firstDrinkTime.unix())\n    updateDrinkHistogram(beerAnalytics, beer.firstDrinkTime)\n\n    if (beer.firstDrinkTime.diff(beer.lastDrinkTime) !== 0) {\n      uniqueDrinkTimes.push(beer.lastDrinkTime)\n      uniqueDrinkUnixTimestamps.push(beer.lastDrinkTime.unix())\n      updateDrinkHistogram(beerAnalytics, beer.lastDrinkTime)\n    }\n  }\n\n  for (const activity of recentActivity) {\n    const time = activity.time\n    const timeUnix = time.unix()\n\n    if (!uniqueDrinkUnixTimestamps.includes(timeUnix)) {\n      uniqueDrinkTimes.push(time)\n      uniqueDrinkUnixTimestamps.push(timeUnix)\n      updateDrinkHistogram(beerAnalytics, time)\n    }\n  }\n\n  const uniqueDrinkTimesSorted = uniqueDrinkTimes.sort((drinkTimeA, drinkTimeB) => {\n    const drinkUnixA = drinkTimeA.unix()\n    const drinkUnixB = drinkTimeB.unix()\n\n    if (drinkUnixA < drinkUnixB) {\n      return -1\n    }\n\n    if (drinkUnixA > drinkUnixB) {\n      return 1\n    }\n\n    return 0\n  })\n\n  /*\n  Drinking Levels from https://www.niaaa.nih.gov/alcohol-health/overview-alcohol-consumption/moderate-binge-drinking\n  Binge Drinking = 5+ drinks (men) / 4+ drinks (women) in < 2 hours\n  Heavy Alcohol Use = 5+ instances of binge drinking in the past month\n  */\n\n  let potentialBinge = []\n\n  for (const drinkTime of uniqueDrinkTimesSorted) {\n    if (potentialBinge.length === 0) {\n      potentialBinge = [drinkTime]\n    } else if (drinkTime.diff(potentialBinge[potentialBinge.length - 1], 'hours') > 2) {\n      if (potentialBinge.length >= 4) {\n        beerAnalytics.binges.push(potentialBinge)\n      }\n\n      potentialBinge = [drinkTime]\n    } else {\n      potentialBinge.push(drinkTime)\n    }\n  }\n\n  if (potentialBinge.length >= 4) {\n    beerAnalytics.binges.push(potentialBinge)\n  }\n\n  let potentialHeavyUse = []\n  const oneMonthSeconds = 60 * 60 * 24 * 30\n\n  for (const binge of beerAnalytics.binges) {\n    if (potentialHeavyUse.length === 0) {\n      potentialHeavyUse = [binge]\n    } else {\n      const previousBinge = potentialBinge[potentialBinge.length - 1]\n\n      if (binge[0].diff(previousBinge[previousBinge.length - 1]) > oneMonthSeconds) {\n        if (potentialHeavyUse.length >= 5) {\n          beerAnalytics.heavyUses.push(potentialHeavyUse)\n        }\n\n        potentialHeavyUse = [binge]\n      } else {\n        potentialHeavyUse.push(binge)\n      }\n    }\n  }\n\n  if (potentialHeavyUse.length >= 5) {\n    beerAnalytics.heavyUses.push(potentialHeavyUse)\n  }\n\n  return beerAnalytics\n}\n\nconst geocodeAddress = async (geocoder, venue) => new Promise((resolve, reject) => {\n  geocoder.geocode({\n    address: venue.address\n  }, function (results, status) {\n    if (status !== 'OK') {\n      if (status === 'OVER_QUERY_LIMIT') {\n        // Retry after 1 second.\n        setTimeout(() => {\n          geocodeAddress(geocoder, venue)\n            .then(resolve)\n            .catch(reject)\n        }, 1000)\n      } else {\n        reject(new Error(status))\n      }\n    } else {\n      venue.geocode = results\n      resolve()\n    }\n  })\n})\n\nconst geocodeAddresses = async (googleMapsClient, venues) => {\n  if (!googleMapsClient) {\n    throw new Error('Must set the Google Maps API key prior to using this functionality.')\n  }\n\n  const geocoder = new googleMapsClient.maps.Geocoder()\n  const promises = []\n\n  for (const venue of venues) {\n    promises.push(geocodeAddress(geocoder, venue))\n  }\n\n  await Promise.all(promises)\n}\n\nconst displayGoogleMap = (googleMapsClient, venues) => {\n  const latLngs = []\n  const markers = []\n  const heatmapData = []\n\n  for (const venue of venues) {\n    if (venue.geocode) {\n      const latLng = {\n        lat: venue.geocode[0].geometry.location.lat(),\n        lng: venue.geocode[0].geometry.location.lng()\n      }\n\n      latLngs.push(latLng)\n\n      markers.push(\n        new googleMapsClient.maps.Marker({\n          position: latLng,\n          title: `${venue.checkIns} beers logged at ${venue.name}`\n        })\n      )\n\n      heatmapData.push({\n        location: new googleMapsClient.maps.LatLng(latLng.lat, latLng.lng),\n        weight: venue.checkIns\n      })\n    }\n  }\n\n  const center = {\n    lat: latLngs.map(latLng => latLng.lat).reduce((a, b) => a + b, 0) / latLngs.length,\n    lng: latLngs.map(latLng => latLng.lng).reduce((a, b) => a + b, 0) / latLngs.length\n  }\n\n  const map = new googleMapsClient.maps.Map(document.getElementById('map'), {\n    center,\n    zoom: 4\n  })\n\n  for (const marker of markers) {\n    marker.setMap(map)\n  }\n\n  // eslint-disable-next-line no-new\n  new googleMapsClient.maps.visualization.HeatmapLayer({\n    data: heatmapData,\n    map,\n    dissipating: false\n  })\n\n  return map\n}\n\nexport const getUntappdOsint = async (username, recentActivityOnly, googleMapsClient) => {\n  const data = { username }\n\n  const userDom = await getUserDom(username)\n  data.stats = parseStats(userDom)\n  data.recentActivity = parseRecentActivity(userDom)\n\n  if (recentActivityOnly) {\n    return data\n  }\n\n  const [friendsDom, beersDom, venuesDom] = await Promise.all([\n    getFriendsDom(username),\n    getBeersDom(username),\n    getVenuesDom(username)\n  ])\n\n  data.friends = parseFriends(friendsDom)\n  data.beers = parseBeers(beersDom)\n  data.venues = parseVenues(venuesDom)\n\n  data.beerAnalytics = analyzeBeers(data.beers, data.recentActivity)\n\n  if (googleMapsClient) {\n    await geocodeAddresses(googleMapsClient, data.venues)\n    data.map = displayGoogleMap(googleMapsClient, data.venues)\n  }\n\n  return data\n}\n\nexport const loadGoogleMapsClient = async (googleMapsApiKey) => {\n  const loader = new Loader({\n    apiKey: googleMapsApiKey,\n    version: 'weekly',\n    libraries: ['visualization']\n  })\n\n  await loader.load()\n}\n\nexport const formatHour = (hour) => {\n  return moment(hour, 'H').format('h A')\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAYA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AACA;AADA;AAwBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAoCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AACA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AArEA;AAAA;AACA;AADA;AAsEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlFA;AAAA;AAAA;AAAA;AAAA;AACA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AAAA;AACA;AADA;AA2FA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3GA;AAAA;AAAA;AAAA;AAAA;AACA;AA4GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AACA;AANA;AACA;AADA;AAQA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AACA;AA2BA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAWA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAyBA;AACA;AA1BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}